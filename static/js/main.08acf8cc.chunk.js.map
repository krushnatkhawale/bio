{"version":3,"sources":["assets/images/216.png","components/Header.js","components/APage.js","components/BPage.js","components/CPage.js","components/DPage.js","components/EPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","Navbar","sticky","expand","Image","src","logo","width","height","roundedCircle","Brand","href","Collapse","id","Nav","className","to","APage","Container","BPage","CPage","DPage","EPage","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,iC,8LCK5B,SAASC,EAAOC,GAC7B,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,OAAO,MAAMC,OAAO,MAA5B,IAAmC,6BACjC,kBAACC,EAAA,EAAD,CAAOC,IAAKC,IAAMC,MAAM,KAAKC,OAAO,KAAKC,eAAa,IACtD,gCACA,kBAACR,EAAA,EAAOS,MAAR,CAAcC,KAAK,KAAnB,oBACA,kBAACV,EAAA,EAAOW,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,YAA5B,UACA,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,YAA5B,sBACA,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,YAA5B,mBACA,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,YAA5B,qBACA,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,YAA5B,mB,oBCfG,SAASE,EAAMjB,GAC5B,OACE,kBAACkB,EAAA,EAAD,KACE,0CCHS,SAASC,EAAMnB,GAC5B,OACE,kBAACkB,EAAA,EAAD,KACE,sDCHS,SAASE,EAAMpB,GAC5B,OACE,kBAACkB,EAAA,EAAD,KACE,mDCHS,SAASG,EAAMrB,GAC5B,OACE,kBAACkB,EAAA,EAAD,KACE,oDCHS,SAASI,EAAMtB,GAC5B,OACE,kBAACkB,EAAA,EAAD,CAAWH,UAAU,gBACnB,8C,MCqBSQ,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAACxB,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyB,KAAK,SAASC,UAAWR,IAChC,kBAAC,IAAD,CAAOO,KAAK,SAASC,UAAWN,IAChC,kBAAC,IAAD,CAAOK,KAAK,SAASC,UAAWL,IAChC,kBAAC,IAAD,CAAOI,KAAK,SAASC,UAAWJ,IAChC,kBAAC,IAAD,CAAOG,KAAK,SAASC,UAAWH,QCRtBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.08acf8cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/216.7a8fb455.png\";","import React from \"react\";\r\nimport { Image, Nav, Navbar } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport logo from '../assets/images/216.png';\r\n\r\nexport default function Header(props) {\r\n  return (\r\n    <div >\r\n      <Navbar sticky=\"top\" expand=\"xl\" > <br />\r\n        <Image src={logo} width=\"60\" height=\"60\" roundedCircle />\r\n        <p>_</p>\r\n        <Navbar.Brand href=\"#\">Krushnat Khavale</Navbar.Brand>\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\"  >\r\n          <Nav className=\"ml-auto\" >\r\n            <Link to=\"/APage\" className=\"nav-link\"> Home </Link>\r\n            <Link to=\"/BPage\" className=\"nav-link\"> Machine learning </Link>\r\n            <Link to=\"/CPage\" className=\"nav-link\"> Microservices </Link>\r\n            <Link to=\"/DPage\" className=\"nav-link\"> Something Else  </Link>\r\n            <Link to=\"/EPage\" className=\"nav-link\"> About Me  </Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nexport default function APage(props) {\r\n  return (\r\n    <Container>\r\n      <h1>Home Page</h1>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nexport default function BPage(props) {\r\n  return (\r\n    <Container>\r\n      <h1>Machine Learning Page</h1>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nexport default function CPage(props) {\r\n  return (\r\n    <Container>\r\n      <h1>Microservices Page</h1>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nexport default function DPage(props) {\r\n  return (\r\n    <Container>\r\n      <h1>Something Else Page</h1>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nexport default function EPage(props) {\r\n  return (\r\n    <Container className=\"bg-secondary\">\r\n      <h1>About Me Page</h1>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport APage from './components/APage';\nimport BPage from './components/BPage';\nimport CPage from './components/CPage';\nimport DPage from './components/DPage';\nimport EPage from './components/EPage';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Header />\n        <Switch>\n          <Route path=\"/APage\" component={APage} />\n          <Route path=\"/BPage\" component={BPage} />\n          <Route path=\"/CPage\" component={CPage} />\n          <Route path=\"/DPage\" component={DPage} />\n          <Route path=\"/EPage\" component={EPage} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}